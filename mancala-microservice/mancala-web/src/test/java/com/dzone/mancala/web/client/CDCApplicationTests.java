package com.dzone.mancala.web.client;

import com.dzone.mancala.web.MancalaWebApplication;
import com.dzone.mancala.web.model.KalahaGame;
import com.dzone.mancala.web.model.KalahaPit;
import org.assertj.core.api.BDDAssertions;
import org.junit.Test;
import org.junit.runner.RunWith;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.json.AutoConfigureJson;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cloud.contract.stubrunner.spring.AutoConfigureStubRunner;
import org.springframework.cloud.contract.stubrunner.spring.StubRunnerProperties;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.junit4.SpringRunner;
import java.util.Arrays;
import java.util.List;

/*
    This class performs Contract based Testing for Mancala-api service based on the Stub generated by service itself
 */

@AutoConfigureStubRunner (
        ids = "com.dzone.mancalagame:mancala-api:+:8080",
        stubsMode = StubRunnerProperties.StubsMode.LOCAL)
@AutoConfigureJson
@SpringBootTest (classes = MancalaWebApplication.class)
@RunWith(SpringRunner.class)
@DirtiesContext
public class CDCApplicationTests {

    @Autowired
    private MancalaClient mancalaClient;

    @Test
    public void testManacalaCreation () throws Exception {

        KalahaGame kalahaGame = mancalaClient.startNewMancalaGame();

        List<KalahaPit> kalahaPits = Arrays.asList(
                new KalahaPit(1 , 6),
                new KalahaPit(2 , 6),
                new KalahaPit(3 , 6),
                new KalahaPit(4 , 6),
                new KalahaPit(5 , 6),
                new KalahaPit(6 , 6),
                new KalahaPit(7 , 0),
                new KalahaPit(8 , 6),
                new KalahaPit(9 , 6),
                new KalahaPit(10 , 6),
                new KalahaPit(11 , 6),
                new KalahaPit(12 , 6),
                new KalahaPit(13 , 6),
                new KalahaPit(14 , 0));

        BDDAssertions.then(kalahaGame.getPlayerTurn()).isNull();
        BDDAssertions.then(kalahaGame.getPits()).isEqualTo(kalahaPits);
        BDDAssertions.then(kalahaGame.getLeftHouseStones()).isEqualTo(0);
        BDDAssertions.then(kalahaGame.getRightHouseStones()).isEqualTo(0);
    }

    /*
      We first need to run the Mancala Game creation test and use the game id generated to sow the game
   */
    @Test
    public void testManacalaSowingPitIndex2 () throws Exception {

        KalahaGame kalahaGame = mancalaClient.startNewMancalaGame();

        List<KalahaPit> kalahaPits = Arrays.asList(
                new KalahaPit(1 , 6),
                new KalahaPit(2 , 6),
                new KalahaPit(3 , 6),
                new KalahaPit(4 , 6),
                new KalahaPit(5 , 6),
                new KalahaPit(6 , 6),
                new KalahaPit(7 , 0),
                new KalahaPit(8 , 6),
                new KalahaPit(9 , 6),
                new KalahaPit(10 , 6),
                new KalahaPit(11 , 6),
                new KalahaPit(12 , 6),
                new KalahaPit(13 , 6),
                new KalahaPit(14 , 0));

        BDDAssertions.then(kalahaGame.getPlayerTurn()).isNull();
        BDDAssertions.then(kalahaGame.getPits()).isEqualTo(kalahaPits);
        BDDAssertions.then(kalahaGame.getLeftHouseStones()).isEqualTo(0);
        BDDAssertions.then(kalahaGame.getRightHouseStones()).isEqualTo(0);

        // 2. Run the Mancala Sow test for pit 2

        KalahaGame kalahaGameAfterSowingPit2 = mancalaClient.sowMancalaGame(kalahaGame.getId(), 2);

        System.out.println(kalahaGameAfterSowingPit2);

        List<KalahaPit> newKalahaPits = Arrays.asList(
                new KalahaPit(1 , 6),
                new KalahaPit(2 , 0),
                new KalahaPit(3 , 7),
                new KalahaPit(4 , 7),
                new KalahaPit(5 , 7),
                new KalahaPit(6 , 7),
                new KalahaPit(7 , 1),
                new KalahaPit(8 , 7),
                new KalahaPit(9 , 6),
                new KalahaPit(10 , 6),
                new KalahaPit(11 , 6),
                new KalahaPit(12 , 6),
                new KalahaPit(13 , 6),
                new KalahaPit(14 , 0));

        BDDAssertions.then(kalahaGameAfterSowingPit2.getPlayerTurn()).isEqualTo("PlayerB");
        BDDAssertions.then(kalahaGameAfterSowingPit2.getPits()).isEqualTo(newKalahaPits);
        BDDAssertions.then(kalahaGameAfterSowingPit2.getLeftHouseStones()).isEqualTo(0);
        BDDAssertions.then(kalahaGameAfterSowingPit2.getRightHouseStones()).isEqualTo(1);
    }
}
